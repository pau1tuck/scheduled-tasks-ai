# docker-compose.yml
services:
  django:
    container_name: django
    build:
      context: .
      args:
        DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY} 
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - ./db.sqlite3:/app/db.sqlite3
    ports:
      - "8000:8000"
    environment:
      REDIS_URL: ${REDIS_URL} 
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
    env_file: 
      - .env
    restart: always
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started

  # DATABASES AND CACHING
  postgres:
    container_name: postgres
    image: postgres:15-alpine
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    
  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always

  # TASK SCHEDULING
  celery_worker:
    container_name: celery
    build:
      context: .
      args:
        REDIS_STREAMS_URL: ${REDIS_STREAMS_URL}
    command: python -m celery -A settings worker -l INFO
    volumes:
      - .:/app
    environment:
      CELERY_BROKER_URL: ${REDIS_STREAMS_URL}
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
    restart: always

  qcluster:
    container_name: qcluster
    build: .
    command: python manage.py qcluster
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
    restart: always

  # MONITORING
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always
    environment:
      # Reduce Grafana logging level. Change to debug, info, warn, error if necessary:
      - GF_LOG_LEVEL=warn 

volumes:
  grafana_data: # Development and production: Define the named volume for Grafana persistence.
  postgres_data:  # Development: Define the named volume for PostgreSQL persistence.
  redis_data:  # Development: Define the named volume for Redis persistence.
